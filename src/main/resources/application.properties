server.port=8080

spring.jpa.hibernate.ddl-auto=update

# H2 Database 설정 (운영 환경용)
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect

# =======================================
# Kafka Common Properties
# =======================================
# Docker Compose 환경의 내부 리스너를 바라보도록 설정합니다.
spring.kafka.bootstrap-servers=kafka:19092
# 스키마 레지스트리 서버 주소. 스키마를 등록하고 조회할 때 사용됩니다.
spring.kafka.properties.schema.registry.url=http://schema-registry:8085


# =======================================
# Kafka Producer Properties
# =======================================
# 메시지 키를 직렬화할 때 사용할 클래스입니다.
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# 메시지 값을 직렬화할 때 사용할 클래스입니다. Avro 형식으로 직렬화하고 스키마 레지스트리와 통신합니다.
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer

# =======================================
# Kafka Consumer Properties
# =======================================
spring.kafka.consumer.group-id=insurance-group-avro
spring.kafka.consumer.auto-offset-reset=earliest
# 메시지 키를 역직렬화할 때 사용할 클래스입니다.
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# 메시지 값을 역직렬화할 때 사용할 클래스입니다. Avro 형식의 데이터를 역직렬화하고 스키마 레지스트리와 통신합니다.
spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
# 역직렬화 시 Avro 스키마에 해당하는 특정 자바 클래스(SpecificRecord)로 변환할지 여부를 설정합니다.
spring.kafka.consumer.properties.specific.avro.reader=true

# =======================================
# Kafka Streams Properties
# =======================================
spring.kafka.streams.application-id=insurance-streams-app

# ========================================
# External APIs
# ========================================
faker.api.url=https://fakerapi.it/api/v1/custom