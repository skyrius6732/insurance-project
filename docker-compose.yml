# Docker Compose 설정 파일 버전 정의
version: '3.8'

# 모든 서비스(컨테이너)들이 함께 통신할 가상 네트워크를 정의합니다.
# 이 네트워크 안에서는 컨테이너 이름(예: 'mysql')을 호스트 이름처럼 사용할 수 있습니다.
networks:
  insurance-network:
    driver: bridge

# 컨테이너가 삭제되어도 데이터를 영구적으로 보존하기 위한 볼륨을 정의합니다.
volumes:
  mysql-data:
  jenkins-data:
  kafka-data:
  prometheus-data:
  grafana-data:

# 실행할 서비스(컨테이너)들의 목록을 정의합니다.
services:
  # 1. Nginx (리버스 프록시)
  # 외부의 HTTP(80) 요청을 받아 내부의 Spring Boot 앱으로 전달하는 역할.
  nginx:
    image: nginx:latest
    container_name: nginx-proxy
    ports:
      - "80:80"
    volumes:
      # 호스트의 nginx 설정 폴더를 컨테이너에 연결하여 설정을 외부에서 관리합니다.
      # - /home/skyrius/nginx:/etc/nginx
      # docker-compose.yml 파일이 있는 디렉토리(insurance-project)를 기준으로 상대 경로 사용
      - ./nginx:/etc/nginx
    networks:
      - insurance-network
    # insurance-app이 먼저 실행된 후에 nginx가 실행되도록 순서를 보장합니다.
    depends_on:
      - insurance-app

  # 2. Spring Boot 애플리케이션
  # 실제 비즈니스 로직이 담긴 핵심 애플리케이션입니다.
  insurance-app:
    build: .
    image: skyrius6732/insurance-project:latest
    container_name: insurance-project-insurance-app-8081
    ports:
      - "8081:8080"
    networks:
      - insurance-network
    # DB, Redis, Kafka가 먼저 준비되어야 앱이 정상 실행됩니다.
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    # application.properties의 내용을 여기서 환경변수로 주입하여 관리할 수 있습니다.
    # 이렇게 하면 코드 변경 없이 설정을 바꿀 수 있어 편리합니다.
    environment:
      # - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/mydatabase?useSSL=false
      # - SPRING_DATASOURCE_USERNAME=user
      # - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_DATASOURCE_URL=jdbc:h2:mem:testdb
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.h2.Driver
      - SPRING_DATASOURCE_USERNAME=sa
      - SPRING_DATASOURCE_PASSWORD=
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.H2Dialect
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  # 3. MySQL 데이터베이스
  mysql:
    image: mysql:latest
    container_name: mysql-container
    ports:
      - "3306:3306"
    volumes:
      # DB 데이터를 컨테이너가 삭제되어도 보존하기 위해 볼륨을 사용합니다.
      - mysql-data:/var/lib/mysql
      - ./mysql/conf.d/my.cnf:/etc/mysql/conf.d/my.cnf
    networks:
      - insurance-network
    # MySQL 서버 실행을 위한 필수 환경 변수들입니다.
    # 보안을 위해 실제 비밀번호로 꼭 변경해주세요.
    environment:
      - MYSQL_ROOT_PASSWORD=your_root_password 
      - MYSQL_DATABASE=mydatabase
      - MYSQL_USER=user
      - MYSQL_PASSWORD=password
      - MYSQL_AUTHENTICATION_PLUGIN=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 3s
      retries: 5

  # 4. Redis 캐시
  redis:
    image: bitnami/redis:latest
    container_name: redis-container
    ports:
      - "6379:6379"
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - insurance-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"] # Redis ping 명령으로 헬스 체크
      interval: 5s
      timeout: 3s
      retries: 5

  # 5. Kafka (Zookeeper 없는 KRaft 모드)
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    networks:
      - insurance-network
    environment:
      KAFKA_CFG_BROKER_ID: 1
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://172.24.96.243:9092
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CFG_LOG_DIRS: /bitnami/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server localhost:9092 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 90s

  # 6. Jenkins (CI/CD 서버)
  jenkins:
  # image: jenkins/jenkins:lts
    build: ./jenkins
    container_name: jenkins
    dns:
      - "8.8.8.8"
      - "8.8.4.4"
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      # Jenkins 설정과 작업 내역을 보존하기 위해 볼륨을 사용합니다.
      - jenkins-data:/var/jenkins_home
      # Docker를 Jenkins 컨테이너 안에서 사용하기 위한 소켓 마운트입니다.
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - insurance-network
    group_add:
      - 117

  # 7. Kafka Exporter (Kafka 메트릭 수집)
  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: kafka-exporter
    ports:
      - "9308:9308"
    networks:
      - insurance-network
    environment:
      - KAFKA_SERVER=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy

  # 8. Prometheus (메트릭 수집 및 저장)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command: --config.file=/etc/prometheus/prometheus.yml --web.enable-lifecycle
    networks:
      - insurance-network
    depends_on:
      - kafka-exporter

  # 9. Grafana (데이터 시각화 및 대시보드)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - insurance-network
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
